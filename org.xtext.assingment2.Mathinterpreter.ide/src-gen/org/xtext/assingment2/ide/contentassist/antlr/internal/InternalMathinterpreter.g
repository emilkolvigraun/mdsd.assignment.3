/*
 * generated by Xtext 2.21.0
 */
grammar InternalMathinterpreter;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.assingment2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.assingment2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.assingment2.services.MathinterpreterGrammarAccess;

}
@parser::members {
	private MathinterpreterGrammarAccess grammarAccess;

	public void setGrammarAccess(MathinterpreterGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getMathexpressionAssignment()); }
		(rule__Model__MathexpressionAssignment)*
		{ after(grammarAccess.getModelAccess().getMathexpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathExpression
entryRuleMathExpression
:
{ before(grammarAccess.getMathExpressionRule()); }
	 ruleMathExpression
{ after(grammarAccess.getMathExpressionRule()); } 
	 EOF 
;

// Rule MathExpression
ruleMathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpressionAccess().getAlternatives()); }
		(rule__MathExpression__Alternatives)
		{ after(grammarAccess.getMathExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefineExpr
entryRuleDefineExpr
:
{ before(grammarAccess.getDefineExprRule()); }
	 ruleDefineExpr
{ after(grammarAccess.getDefineExprRule()); } 
	 EOF 
;

// Rule DefineExpr
ruleDefineExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineExprAccess().getGroup()); }
		(rule__DefineExpr__Group__0)
		{ after(grammarAccess.getDefineExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternal
entryRuleExternal
:
{ before(grammarAccess.getExternalRule()); }
	 ruleExternal
{ after(grammarAccess.getExternalRule()); } 
	 EOF 
;

// Rule External
ruleExternal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalAccess().getGroup()); }
		(rule__External__Group__0)
		{ after(grammarAccess.getExternalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePMExpression
entryRulePMExpression
:
{ before(grammarAccess.getPMExpressionRule()); }
	 rulePMExpression
{ after(grammarAccess.getPMExpressionRule()); } 
	 EOF 
;

// Rule PMExpression
rulePMExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPMExpressionAccess().getGroup()); }
		(rule__PMExpression__Group__0)
		{ after(grammarAccess.getPMExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMDExpression
entryRuleMDExpression
:
{ before(grammarAccess.getMDExpressionRule()); }
	 ruleMDExpression
{ after(grammarAccess.getMDExpressionRule()); } 
	 EOF 
;

// Rule MDExpression
ruleMDExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMDExpressionAccess().getGroup()); }
		(rule__MDExpression__Group__0)
		{ after(grammarAccess.getMDExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowExpression
entryRulePowExpression
:
{ before(grammarAccess.getPowExpressionRule()); }
	 rulePowExpression
{ after(grammarAccess.getPowExpressionRule()); } 
	 EOF 
;

// Rule PowExpression
rulePowExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowExpressionAccess().getGroup()); }
		(rule__PowExpression__Group__0)
		{ after(grammarAccess.getPowExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePower
entryRulePower
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerAccess().getGroup()); }
		(rule__Power__Group__0)
		{ after(grammarAccess.getPowerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusMinus
entryRulePlusMinus
:
{ before(grammarAccess.getPlusMinusRule()); }
	 rulePlusMinus
{ after(grammarAccess.getPlusMinusRule()); } 
	 EOF 
;

// Rule PlusMinus
rulePlusMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusMinusAccess().getAlternatives()); }
		(rule__PlusMinus__Alternatives)
		{ after(grammarAccess.getPlusMinusAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplyDivide
entryRuleMultiplyDivide
:
{ before(grammarAccess.getMultiplyDivideRule()); }
	 ruleMultiplyDivide
{ after(grammarAccess.getMultiplyDivideRule()); } 
	 EOF 
;

// Rule MultiplyDivide
ruleMultiplyDivide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyDivideAccess().getAlternatives()); }
		(rule__MultiplyDivide__Alternatives)
		{ after(grammarAccess.getMultiplyDivideAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableName
entryRuleVariableName
:
{ before(grammarAccess.getVariableNameRule()); }
	 ruleVariableName
{ after(grammarAccess.getVariableNameRule()); } 
	 EOF 
;

// Rule VariableName
ruleVariableName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableNameAccess().getNameAssignment()); }
		(rule__VariableName__NameAssignment)
		{ after(grammarAccess.getVariableNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getAlternatives()); }
		(rule__Number__Alternatives)
		{ after(grammarAccess.getNumberAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositive
entryRulePositive
:
{ before(grammarAccess.getPositiveRule()); }
	 rulePositive
{ after(grammarAccess.getPositiveRule()); } 
	 EOF 
;

// Rule Positive
rulePositive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveAccess().getValueAssignment()); }
		(rule__Positive__ValueAssignment)
		{ after(grammarAccess.getPositiveAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegative
entryRuleNegative
:
{ before(grammarAccess.getNegativeRule()); }
	 ruleNegative
{ after(grammarAccess.getNegativeRule()); } 
	 EOF 
;

// Rule Negative
ruleNegative 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegativeAccess().getGroup()); }
		(rule__Negative__Group__0)
		{ after(grammarAccess.getNegativeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePMParenthesis
entryRulePMParenthesis
:
{ before(grammarAccess.getPMParenthesisRule()); }
	 rulePMParenthesis
{ after(grammarAccess.getPMParenthesisRule()); } 
	 EOF 
;

// Rule PMParenthesis
rulePMParenthesis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPMParenthesisAccess().getGroup()); }
		(rule__PMParenthesis__Group__0)
		{ after(grammarAccess.getPMParenthesisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefParenthesis
entryRuleDefParenthesis
:
{ before(grammarAccess.getDefParenthesisRule()); }
	 ruleDefParenthesis
{ after(grammarAccess.getDefParenthesisRule()); } 
	 EOF 
;

// Rule DefParenthesis
ruleDefParenthesis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefParenthesisAccess().getGroup()); }
		(rule__DefParenthesis__Group__0)
		{ after(grammarAccess.getDefParenthesisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getMathExpressionAccess().getFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getDefineExprParserRuleCall_1()); }
		ruleDefineExpr
		{ after(grammarAccess.getMathExpressionAccess().getDefineExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ExpressionAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getExpressionPMExpressionParserRuleCall_3_0_0()); }
		rulePMExpression
		{ after(grammarAccess.getFunctionAccess().getExpressionPMExpressionParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getExpressionExternalParserRuleCall_3_0_1()); }
		ruleExternal
		{ after(grammarAccess.getFunctionAccess().getExpressionExternalParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__ExpressionAlternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineExprAccess().getExpressionPMExpressionParserRuleCall_4_0_0()); }
		rulePMExpression
		{ after(grammarAccess.getDefineExprAccess().getExpressionPMExpressionParserRuleCall_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefineExprAccess().getExpressionExternalParserRuleCall_4_0_1()); }
		ruleExternal
		{ after(grammarAccess.getDefineExprAccess().getExpressionExternalParserRuleCall_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionPMExpressionParserRuleCall_2_0_0()); }
		rulePMExpression
		{ after(grammarAccess.getVariableAccess().getExpressionPMExpressionParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getExpressionExternalParserRuleCall_2_0_1()); }
		ruleExternal
		{ after(grammarAccess.getVariableAccess().getExpressionExternalParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup_0()); }
		(rule__PlusMinus__Group_0__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusMinusAccess().getGroup_1()); }
		(rule__PlusMinus__Group_1__0)
		{ after(grammarAccess.getPlusMinusAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyDivideAccess().getGroup_0()); }
		(rule__MultiplyDivide__Group_0__0)
		{ after(grammarAccess.getMultiplyDivideAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyDivideAccess().getGroup_1()); }
		(rule__MultiplyDivide__Group_1__0)
		{ after(grammarAccess.getMultiplyDivideAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getPrimaryAccess().getNumberParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getVariableNameParserRuleCall_1()); }
		ruleVariableName
		{ after(grammarAccess.getPrimaryAccess().getVariableNameParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getPMParenthesisParserRuleCall_2()); }
		rulePMParenthesis
		{ after(grammarAccess.getPrimaryAccess().getPMParenthesisParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getDefParenthesisParserRuleCall_3()); }
		ruleDefParenthesis
		{ after(grammarAccess.getPrimaryAccess().getDefParenthesisParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getPositiveParserRuleCall_0()); }
		rulePositive
		{ after(grammarAccess.getNumberAccess().getPositiveParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberAccess().getNegativeParserRuleCall_1()); }
		ruleNegative
		{ after(grammarAccess.getNumberAccess().getNegativeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__ExpressionAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPMParenthesisAccess().getExpressionPMExpressionParserRuleCall_1_0_0()); }
		rulePMExpression
		{ after(grammarAccess.getPMParenthesisAccess().getExpressionPMExpressionParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPMParenthesisAccess().getExpressionExternalParserRuleCall_1_0_1()); }
		ruleExternal
		{ after(grammarAccess.getPMParenthesisAccess().getExpressionExternalParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getResultKeyword_0()); }
	'result'
	{ after(grammarAccess.getFunctionAccess().getResultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDescriptionAssignment_1()); }
	(rule__Function__DescriptionAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getDescriptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getIsKeyword_2()); }
	'is'
	{ after(grammarAccess.getFunctionAccess().getIsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getExpressionAssignment_3()); }
	(rule__Function__ExpressionAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefineExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__0__Impl
	rule__DefineExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getDefineExprAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__1__Impl
	rule__DefineExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getVariablesAssignment_1()); }
	(rule__DefineExpr__VariablesAssignment_1)
	{ after(grammarAccess.getDefineExprAccess().getVariablesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__2__Impl
	rule__DefineExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getGroup_2()); }
	(rule__DefineExpr__Group_2__0)*
	{ after(grammarAccess.getDefineExprAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__3__Impl
	rule__DefineExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getDefineExprAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__4__Impl
	rule__DefineExpr__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getExpressionAssignment_4()); }
	(rule__DefineExpr__ExpressionAssignment_4)
	{ after(grammarAccess.getDefineExprAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getEndKeyword_5()); }
	'end'
	{ after(grammarAccess.getDefineExprAccess().getEndKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefineExpr__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group_2__0__Impl
	rule__DefineExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getAndKeyword_2_0()); }
	'and'
	{ after(grammarAccess.getDefineExprAccess().getAndKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefineExpr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineExprAccess().getVariablesAssignment_2_1()); }
	(rule__DefineExpr__VariablesAssignment_2_1)
	{ after(grammarAccess.getDefineExprAccess().getVariablesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
	(rule__Variable__NameAssignment_0)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getExpressionAssignment_2()); }
	(rule__Variable__ExpressionAssignment_2)
	{ after(grammarAccess.getVariableAccess().getExpressionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__External__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__0__Impl
	rule__External__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getExternalKeyword_0()); }
	'external.'
	{ after(grammarAccess.getExternalAccess().getExternalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__1__Impl
	rule__External__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getNameAssignment_1()); }
	(rule__External__NameAssignment_1)
	{ after(grammarAccess.getExternalAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__2__Impl
	rule__External__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getExternalAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__3__Impl
	rule__External__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getArgumentsAssignment_3()); }
	(rule__External__ArgumentsAssignment_3)
	{ after(grammarAccess.getExternalAccess().getArgumentsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__4__Impl
	rule__External__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getGroup_4()); }
	(rule__External__Group_4__0)*
	{ after(grammarAccess.getExternalAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getExternalAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__External__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group_4__0__Impl
	rule__External__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getExternalAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getArgumentsAssignment_4_1()); }
	(rule__External__ArgumentsAssignment_4_1)
	{ after(grammarAccess.getExternalAccess().getArgumentsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PMExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMExpression__Group__0__Impl
	rule__PMExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMExpressionAccess().getMDExpressionParserRuleCall_0()); }
	ruleMDExpression
	{ after(grammarAccess.getPMExpressionAccess().getMDExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMExpressionAccess().getGroup_1()); }
	(rule__PMExpression__Group_1__0)*
	{ after(grammarAccess.getPMExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PMExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMExpression__Group_1__0__Impl
	rule__PMExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMExpressionAccess().getPMExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPMExpressionAccess().getPMExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMExpression__Group_1__1__Impl
	rule__PMExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__PMExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getPMExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMExpressionAccess().getRightAssignment_1_2()); }
	(rule__PMExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPMExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MDExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MDExpression__Group__0__Impl
	rule__MDExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMDExpressionAccess().getPowExpressionParserRuleCall_0()); }
	rulePowExpression
	{ after(grammarAccess.getMDExpressionAccess().getPowExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MDExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMDExpressionAccess().getGroup_1()); }
	(rule__MDExpression__Group_1__0)*
	{ after(grammarAccess.getMDExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MDExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MDExpression__Group_1__0__Impl
	rule__MDExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMDExpressionAccess().getMDExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMDExpressionAccess().getMDExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MDExpression__Group_1__1__Impl
	rule__MDExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMDExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__MDExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getMDExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MDExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMDExpressionAccess().getRightAssignment_1_2()); }
	(rule__MDExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMDExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowExpression__Group__0__Impl
	rule__PowExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowExpressionAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getPowExpressionAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowExpressionAccess().getGroup_1()); }
	(rule__PowExpression__Group_1__0)*
	{ after(grammarAccess.getPowExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowExpression__Group_1__0__Impl
	rule__PowExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowExpressionAccess().getPowExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPowExpressionAccess().getPowExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowExpression__Group_1__1__Impl
	rule__PowExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__PowExpression__OperatorAssignment_1_1)
	{ after(grammarAccess.getPowExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowExpressionAccess().getRightAssignment_1_2()); }
	(rule__PowExpression__RightAssignment_1_2)
	{ after(grammarAccess.getPowExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getPowAction_0()); }
	()
	{ after(grammarAccess.getPowerAccess().getPowAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getAsteriskAsteriskKeyword_1()); }
	'**'
	{ after(grammarAccess.getPowerAccess().getAsteriskAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_0__0__Impl
	rule__PlusMinus__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getPlusAction_0_0()); }
	()
	{ after(grammarAccess.getPlusMinusAccess().getPlusAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0_1()); }
	'+'
	{ after(grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__0__Impl
	rule__PlusMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getMinusAction_1_0()); }
	()
	{ after(grammarAccess.getPlusMinusAccess().getMinusAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivide__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivide__Group_0__0__Impl
	rule__MultiplyDivide__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideAccess().getMultiplyAction_0_0()); }
	()
	{ after(grammarAccess.getMultiplyDivideAccess().getMultiplyAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivide__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideAccess().getAsteriskKeyword_0_1()); }
	'*'
	{ after(grammarAccess.getMultiplyDivideAccess().getAsteriskKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplyDivide__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivide__Group_1__0__Impl
	rule__MultiplyDivide__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideAccess().getDivideAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplyDivideAccess().getDivideAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplyDivide__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyDivide__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplyDivideAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getMultiplyDivideAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negative__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group__0__Impl
	rule__Negative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_0()); }
	'-'
	{ after(grammarAccess.getNegativeAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negative__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAccess().getValueAssignment_1()); }
	(rule__Negative__ValueAssignment_1)
	{ after(grammarAccess.getNegativeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PMParenthesis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMParenthesis__Group__0__Impl
	rule__PMParenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMParenthesisAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPMParenthesisAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMParenthesis__Group__1__Impl
	rule__PMParenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMParenthesisAccess().getExpressionAssignment_1()); }
	(rule__PMParenthesis__ExpressionAssignment_1)
	{ after(grammarAccess.getPMParenthesisAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PMParenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPMParenthesisAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getPMParenthesisAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DefParenthesis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefParenthesis__Group__0__Impl
	rule__DefParenthesis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefParenthesis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefParenthesisAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDefParenthesisAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefParenthesis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefParenthesis__Group__1__Impl
	rule__DefParenthesis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefParenthesis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefParenthesisAccess().getDefineExprParserRuleCall_1()); }
	ruleDefineExpr
	{ after(grammarAccess.getDefParenthesisAccess().getDefineExprParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefParenthesis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DefParenthesis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefParenthesis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefParenthesisAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getDefParenthesisAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MathexpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMathexpressionMathExpressionParserRuleCall_0()); }
		ruleMathExpression
		{ after(grammarAccess.getModelAccess().getMathexpressionMathExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DescriptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFunctionAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getExpressionAlternatives_3_0()); }
		(rule__Function__ExpressionAlternatives_3_0)
		{ after(grammarAccess.getFunctionAccess().getExpressionAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__VariablesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineExprAccess().getVariablesVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getDefineExprAccess().getVariablesVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__VariablesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineExprAccess().getVariablesVariableParserRuleCall_2_1_0()); }
		ruleVariable
		{ after(grammarAccess.getDefineExprAccess().getVariablesVariableParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineExpr__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineExprAccess().getExpressionAlternatives_4_0()); }
		(rule__DefineExpr__ExpressionAlternatives_4_0)
		{ after(grammarAccess.getDefineExprAccess().getExpressionAlternatives_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ExpressionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getExpressionAlternatives_2_0()); }
		(rule__Variable__ExpressionAlternatives_2_0)
		{ after(grammarAccess.getVariableAccess().getExpressionAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__ArgumentsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getArgumentsNumberParserRuleCall_3_0()); }
		ruleNumber
		{ after(grammarAccess.getExternalAccess().getArgumentsNumberParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__ArgumentsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getArgumentsNumberParserRuleCall_4_1_0()); }
		ruleNumber
		{ after(grammarAccess.getExternalAccess().getArgumentsNumberParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPMExpressionAccess().getOperatorPlusMinusParserRuleCall_1_1_0()); }
		rulePlusMinus
		{ after(grammarAccess.getPMExpressionAccess().getOperatorPlusMinusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPMExpressionAccess().getRightMDExpressionParserRuleCall_1_2_0()); }
		ruleMDExpression
		{ after(grammarAccess.getPMExpressionAccess().getRightMDExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMDExpressionAccess().getOperatorMultiplyDivideParserRuleCall_1_1_0()); }
		ruleMultiplyDivide
		{ after(grammarAccess.getMDExpressionAccess().getOperatorMultiplyDivideParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MDExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMDExpressionAccess().getRightPowExpressionParserRuleCall_1_2_0()); }
		rulePowExpression
		{ after(grammarAccess.getMDExpressionAccess().getRightPowExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowExpressionAccess().getOperatorPowerParserRuleCall_1_1_0()); }
		rulePower
		{ after(grammarAccess.getPowExpressionAccess().getOperatorPowerParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPowExpressionAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Positive__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getPositiveAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negative__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNegativeAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PMParenthesis__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPMParenthesisAccess().getExpressionAlternatives_1_0()); }
		(rule__PMParenthesis__ExpressionAlternatives_1_0)
		{ after(grammarAccess.getPMParenthesisAccess().getExpressionAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
